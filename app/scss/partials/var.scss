$bright-green: #97c93c;
$orange: #f4a71c;
$light-grey: #f3f3f3;
$blue: #00538a;

///font colors
$main: #727271;
$dark-blue: #0098ce;
$orange-text: $orange;
$purple: #621e66;

//fonts
$body-font: 'Open Sans', sans-serif;

@mixin body-font{
	color: $main;
	font-family: $body-font;
	font-size: 14px;
	font-weight: normal;
	webkit-font-smoothing: smooth;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin transition ($value) {
     -moz-transition: $value;
       -o-transition: $value;
      -ms-transition: $value;
  -webkit-transition: $value;
          transition: $value;
}

///
/// #5. Some default breakpoints setup that work, time saver while keeping your breakpoints consistent
///

$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":       560px,
    "tablet-small": 640px,
    "tablet":       768px,
    "tablet-wide":  1024px,
    "sm-comp":      1100px,
    "desktop":      1248px,
    "laptop":       1320px,
    "desktop-wide": 1440px,
    "monitor":      1600px
);

@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

/// linear-interpolation
/// Calculate the definition of a line between two points
/// @param $map - A SASS map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
/// @example
///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>

@function linear-interpolation($map) {
  $keys: map-keys($map);
  @if (length($keys) != 2) {
    @error "linear-interpolation() $map must be exactly 2 values";
  }
  // The slope
  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys,1));

  // The y-intercept
  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);

  // Determine if the sign should be positive or negative
  $sign: "+";
  @if ($b < 0) {
    $sign: "-";
    $b: abs($b);
  }

  @return calc(#{$m*100}vw #{$sign} #{$b});
}
